{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"About Author: James Woolfenden LinkedIn Bio I'm currently working as a Solution Principal for Slalom and based out of London. I have a bit of experience in the DevOps field, I have worked for a number of consultancies directly and indirectly. This is the second of series on Learning about DevOps. Why This is small run through of using Hashicorp Terraform. As a consultant I frequently have to train developers and \"DevOps\" Engineers how, why and when to use it. I started using Terraform from around version 0.5, I was on a Greenfield AWS project and was really struggling with Cloudformation and its tooling. I asked a question on Linkedin on what others were using and the steers I got were Terraform or Ansible. I achieved more in the day after than in the previous week. Hopefully you'll find this book useful. If it's missing or wrong in anyway, log an Issue or even submit a PR. Each Chapter also contains a copy of the code the chapter tries to teach you how to create. I originally wrote this for the pre 0.11 Terraform and I hopefully updated everything to 0.12 and all the samples should work.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#author-james-woolfenden","text":"LinkedIn","title":"Author: James Woolfenden"},{"location":"about/#bio","text":"I'm currently working as a Solution Principal for Slalom and based out of London. I have a bit of experience in the DevOps field, I have worked for a number of consultancies directly and indirectly. This is the second of series on Learning about DevOps.","title":"Bio"},{"location":"about/#why","text":"This is small run through of using Hashicorp Terraform. As a consultant I frequently have to train developers and \"DevOps\" Engineers how, why and when to use it. I started using Terraform from around version 0.5, I was on a Greenfield AWS project and was really struggling with Cloudformation and its tooling. I asked a question on Linkedin on what others were using and the steers I got were Terraform or Ansible. I achieved more in the day after than in the previous week. Hopefully you'll find this book useful. If it's missing or wrong in anyway, log an Issue or even submit a PR. Each Chapter also contains a copy of the code the chapter tries to teach you how to create. I originally wrote this for the pre 0.11 Terraform and I hopefully updated everything to 0.12 and all the samples should work.","title":"Why"},{"location":"help/","text":"Help If its been useful, let me know. If it out of date or broken also. I'll appreciate it. Or If you think something's missing or contribute? Got a question? File a GitHub issue . Contributing Bug Reports & Feature Requests Please use the issue tracker to report any bugs or file feature requests. Copyrights Copyright \u00a9 2019-2020 Slalom, LLC License Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contributors James Woolfenden","title":"Help"},{"location":"help/#help","text":"If its been useful, let me know. If it out of date or broken also. I'll appreciate it. Or If you think something's missing or contribute? Got a question? File a GitHub issue .","title":"Help"},{"location":"help/#contributing","text":"","title":"Contributing"},{"location":"help/#bug-reports-feature-requests","text":"Please use the issue tracker to report any bugs or file feature requests.","title":"Bug Reports &amp; Feature Requests"},{"location":"help/#copyrights","text":"Copyright \u00a9 2019-2020 Slalom, LLC","title":"Copyrights"},{"location":"help/#license","text":"Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"help/#contributors","text":"James Woolfenden","title":"Contributors"},{"location":"lesson1/","text":"Lesson 101 !!! note \"Takeaways\" - blah Exercise 1. Questions Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 101"},{"location":"lesson1/#lesson-101","text":"!!! note \"Takeaways\" - blah","title":"Lesson 101"},{"location":"lesson1/#exercise","text":"1.","title":"Exercise"},{"location":"lesson1/#questions","text":"","title":"Questions"},{"location":"lesson1/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson2/","text":"Lesson 101 !!! note \"Takeaways\" - blah Exercise 1. Questions Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 102"},{"location":"lesson2/#lesson-101","text":"!!! note \"Takeaways\" - blah","title":"Lesson 101"},{"location":"lesson2/#exercise","text":"1.","title":"Exercise"},{"location":"lesson2/#questions","text":"","title":"Questions"},{"location":"lesson2/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson3/","text":"Lesson 101 !!! note \"Takeaways\" - blah Exercise 1. Questions Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 103"},{"location":"lesson3/#lesson-101","text":"!!! note \"Takeaways\" - blah","title":"Lesson 101"},{"location":"lesson3/#exercise","text":"1.","title":"Exercise"},{"location":"lesson3/#questions","text":"","title":"Questions"},{"location":"lesson3/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson4/","text":"Lesson 104 Install Custom Snowflake provider From https://github.com/chanzuckerberg/terraform-provider-snowflake download your platforms latest provider https://github.com/chanzuckerberg/terraform-provider-snowflake/releases : Or find the example archive examples\\lesson04\\terraform-provider-snowflake_0.11.0_linux_amd64.tar.gz Expand the archive and add it to your Terraform plugins: tar -xvf terraform-provider-snowflake_0.11.0_linux_amd64.tar.gz mv terraform-provider-snowflake_v0.11.0 $HOME /.terraform.d/plugins/linux_amd64/ ToSet-up Authentication with Snowflake, you'll need to add your Snowflake credentials as environmental variables: export SNOWFLAKE_USER = 'yourusername' export SNOWFLAKE_PASSWORD = 'yourpassword' and then create provider.snowflake.tf to managed the Snowflake provider in Terraform. provider \"snowflake\" { account = \"ba82113\" region = \"eu-west-1\" version = \"0.11\" } Adding in your own vales for account and region You can then check authentication using Terraform init and plan . Now that Authectication is validated, then next step is to try and create some Snowflake objects. Starting with Schemas - snowflake_schmea.schema.tf . resource \"snowflake_schema\" \"schema\" { for_each = var . schemas name = each . key database = each . value . database comment = each . value . comment } This template needs to have the variable schema defined, create variables.tf variable \"schemas\" { } And set the values for your schemas with snowflake.auto.tfvars schemas = { \"RAW\" = { database = \"DEMO_DB\" comment = \"contains raw data from our source systems\" } \"ANALYTICS\" = { database = \"DEMO_DB\" comment = \"contains tables and views accessible to analysts and reporting\" } } This should now create 2 schemas, RAW and ANALYTICS (assuming you already have a DEMO_DB). Test as before with Terraform init and plan $ terraform plan Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # snowflake_schema.schema[\"ANALYTICS\"] will be created + resource \"snowflake_schema\" \"schema\" { + comment = \"contains tables and views accessible to analysts and reporting\" + data_retention_days = 1 + database = \"DEMO_DB\" + id = ( known after apply ) + is_managed = false + is_transient = false + name = \"ANALYTICS\" } # snowflake_schema.schema[\"RAW\"] will be created + resource \"snowflake_schema\" \"schema\" { + comment = \"contains raw data from our source systems\" + data_retention_days = 1 + database = \"DEMO_DB\" + id = ( known after apply ) + is_managed = false + is_transient = false + name = \"RAW\" } Plan: 2 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Invoke the changes with Terraform apply , selecting yes: Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes snowflake_schema.schema [ \"ANALYTICS\" ] : Creating... snowflake_schema.schema [ \"RAW\" ] : Creating... snowflake_schema.schema [ \"ANALYTICS\" ] : Creation complete after 1s [ id = DEMO_DB | ANALYTICS ] snowflake_schema.schema [ \"RAW\" ] : Creation complete after 1s [ id = DEMO_DB | RAW ] Apply complete! Resources: 2 added, 0 changed, 0 destroyed. Terraform is stating that the Schemas have been created, you can verify the changes in the Snowflake UI, or via SnowSQL with: describe database DEMO_DB ; created_on name kind 2020 - 04 - 21 02 : 33 : 30 . 727 - 0700 ANALYTICS SCHEMA 2020 - 04 - 21 02 : 35 : 19 . 987 - 0700 INFORMATION_SCHEMA SCHEMA 2020 - 04 - 17 02 : 02 : 42 . 057 - 0700 PUBLIC SCHEMA 2020 - 04 - 21 02 : 33 : 30 . 736 - 0700 RAW SCHEMA So thats Terraform creating Snowflake resources via IaC. You can then clean up remove these schemas with Terraform destroy: $ terraform destroy snowflake_schema.schema [ \"RAW\" ] : Refreshing state... [ id = DEMO_DB | RAW ] snowflake_schema.schema [ \"ANALYTICS\" ] : Refreshing state... [ id = DEMO_DB | ANALYTICS ] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # snowflake_schema.schema[\"ANALYTICS\"] will be destroyed - resource \"snowflake_schema\" \"schema\" { - comment = \"contains tables and views accessible to analysts and reporting\" -> null - data_retention_days = 1 -> null - database = \"DEMO_DB\" -> null - id = \"DEMO_DB|ANALYTICS\" -> null - is_managed = false -> null - is_transient = false -> null - name = \"ANALYTICS\" -> null } # snowflake_schema.schema[\"RAW\"] will be destroyed - resource \"snowflake_schema\" \"schema\" { - comment = \"contains raw data from our source systems\" -> null - data_retention_days = 1 -> null - database = \"DEMO_DB\" -> null - id = \"DEMO_DB|RAW\" -> null - is_managed = false -> null - is_transient = false -> null - name = \"RAW\" -> null } Plan: 0 to add, 0 to change, 2 to destroy. Do you really want to destroy all resources? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only 'yes' will be accepted to confirm. Enter a value: yes snowflake_schema.schema [ \"RAW\" ] : Destroying... [ id = DEMO_DB | RAW ] snowflake_schema.schema [ \"ANALYTICS\" ] : Destroying... [ id = DEMO_DB | ANALYTICS ] snowflake_schema.schema [ \"ANALYTICS\" ] : Destruction complete after 1s snowflake_schema.schema [ \"RAW\" ] : Destruction complete after 1s Destroy complete! Resources: 2 destroyed. Which again can be checked with describing the Database: created_on name kind 2020 - 04 - 21 02 : 38 : 39 . 248 - 0700 INFORMATION_SCHEMA SCHEMA 2020 - 04 - 17 02 : 02 : 42 . 057 - 0700 PUBLIC SCHEMA !!! note \"Takeaways\" - blah Can create Snowflake db objects via Terraform. Clean of DB objects by default. Exercise Create Snowflake users via Terraform. Questions Is this any better than using standrard SQL tooling? Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html https://github.com/chanzuckerberg/terraform-provider-snowflake https://adam.boscarino.me/posts/terraform-snowflake/","title":"Lesson 104"},{"location":"lesson4/#lesson-104","text":"","title":"Lesson 104"},{"location":"lesson4/#install-custom-snowflake-provider","text":"From https://github.com/chanzuckerberg/terraform-provider-snowflake download your platforms latest provider https://github.com/chanzuckerberg/terraform-provider-snowflake/releases : Or find the example archive examples\\lesson04\\terraform-provider-snowflake_0.11.0_linux_amd64.tar.gz Expand the archive and add it to your Terraform plugins: tar -xvf terraform-provider-snowflake_0.11.0_linux_amd64.tar.gz mv terraform-provider-snowflake_v0.11.0 $HOME /.terraform.d/plugins/linux_amd64/ ToSet-up Authentication with Snowflake, you'll need to add your Snowflake credentials as environmental variables: export SNOWFLAKE_USER = 'yourusername' export SNOWFLAKE_PASSWORD = 'yourpassword' and then create provider.snowflake.tf to managed the Snowflake provider in Terraform. provider \"snowflake\" { account = \"ba82113\" region = \"eu-west-1\" version = \"0.11\" } Adding in your own vales for account and region You can then check authentication using Terraform init and plan . Now that Authectication is validated, then next step is to try and create some Snowflake objects. Starting with Schemas - snowflake_schmea.schema.tf . resource \"snowflake_schema\" \"schema\" { for_each = var . schemas name = each . key database = each . value . database comment = each . value . comment } This template needs to have the variable schema defined, create variables.tf variable \"schemas\" { } And set the values for your schemas with snowflake.auto.tfvars schemas = { \"RAW\" = { database = \"DEMO_DB\" comment = \"contains raw data from our source systems\" } \"ANALYTICS\" = { database = \"DEMO_DB\" comment = \"contains tables and views accessible to analysts and reporting\" } } This should now create 2 schemas, RAW and ANALYTICS (assuming you already have a DEMO_DB). Test as before with Terraform init and plan $ terraform plan Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # snowflake_schema.schema[\"ANALYTICS\"] will be created + resource \"snowflake_schema\" \"schema\" { + comment = \"contains tables and views accessible to analysts and reporting\" + data_retention_days = 1 + database = \"DEMO_DB\" + id = ( known after apply ) + is_managed = false + is_transient = false + name = \"ANALYTICS\" } # snowflake_schema.schema[\"RAW\"] will be created + resource \"snowflake_schema\" \"schema\" { + comment = \"contains raw data from our source systems\" + data_retention_days = 1 + database = \"DEMO_DB\" + id = ( known after apply ) + is_managed = false + is_transient = false + name = \"RAW\" } Plan: 2 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Invoke the changes with Terraform apply , selecting yes: Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes snowflake_schema.schema [ \"ANALYTICS\" ] : Creating... snowflake_schema.schema [ \"RAW\" ] : Creating... snowflake_schema.schema [ \"ANALYTICS\" ] : Creation complete after 1s [ id = DEMO_DB | ANALYTICS ] snowflake_schema.schema [ \"RAW\" ] : Creation complete after 1s [ id = DEMO_DB | RAW ] Apply complete! Resources: 2 added, 0 changed, 0 destroyed. Terraform is stating that the Schemas have been created, you can verify the changes in the Snowflake UI, or via SnowSQL with: describe database DEMO_DB ; created_on name kind 2020 - 04 - 21 02 : 33 : 30 . 727 - 0700 ANALYTICS SCHEMA 2020 - 04 - 21 02 : 35 : 19 . 987 - 0700 INFORMATION_SCHEMA SCHEMA 2020 - 04 - 17 02 : 02 : 42 . 057 - 0700 PUBLIC SCHEMA 2020 - 04 - 21 02 : 33 : 30 . 736 - 0700 RAW SCHEMA So thats Terraform creating Snowflake resources via IaC. You can then clean up remove these schemas with Terraform destroy: $ terraform destroy snowflake_schema.schema [ \"RAW\" ] : Refreshing state... [ id = DEMO_DB | RAW ] snowflake_schema.schema [ \"ANALYTICS\" ] : Refreshing state... [ id = DEMO_DB | ANALYTICS ] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # snowflake_schema.schema[\"ANALYTICS\"] will be destroyed - resource \"snowflake_schema\" \"schema\" { - comment = \"contains tables and views accessible to analysts and reporting\" -> null - data_retention_days = 1 -> null - database = \"DEMO_DB\" -> null - id = \"DEMO_DB|ANALYTICS\" -> null - is_managed = false -> null - is_transient = false -> null - name = \"ANALYTICS\" -> null } # snowflake_schema.schema[\"RAW\"] will be destroyed - resource \"snowflake_schema\" \"schema\" { - comment = \"contains raw data from our source systems\" -> null - data_retention_days = 1 -> null - database = \"DEMO_DB\" -> null - id = \"DEMO_DB|RAW\" -> null - is_managed = false -> null - is_transient = false -> null - name = \"RAW\" -> null } Plan: 0 to add, 0 to change, 2 to destroy. Do you really want to destroy all resources? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only 'yes' will be accepted to confirm. Enter a value: yes snowflake_schema.schema [ \"RAW\" ] : Destroying... [ id = DEMO_DB | RAW ] snowflake_schema.schema [ \"ANALYTICS\" ] : Destroying... [ id = DEMO_DB | ANALYTICS ] snowflake_schema.schema [ \"ANALYTICS\" ] : Destruction complete after 1s snowflake_schema.schema [ \"RAW\" ] : Destruction complete after 1s Destroy complete! Resources: 2 destroyed. Which again can be checked with describing the Database: created_on name kind 2020 - 04 - 21 02 : 38 : 39 . 248 - 0700 INFORMATION_SCHEMA SCHEMA 2020 - 04 - 17 02 : 02 : 42 . 057 - 0700 PUBLIC SCHEMA !!! note \"Takeaways\" - blah Can create Snowflake db objects via Terraform. Clean of DB objects by default.","title":"Install Custom Snowflake provider"},{"location":"lesson4/#exercise","text":"Create Snowflake users via Terraform.","title":"Exercise"},{"location":"lesson4/#questions","text":"Is this any better than using standrard SQL tooling?","title":"Questions"},{"location":"lesson4/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html https://github.com/chanzuckerberg/terraform-provider-snowflake https://adam.boscarino.me/posts/terraform-snowflake/","title":"Documentation"},{"location":"lesson5/","text":"Lesson 101 !!! note \"Takeaways\" - blah Exercise 1. Questions Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 105"},{"location":"lesson5/#lesson-101","text":"!!! note \"Takeaways\" - blah","title":"Lesson 101"},{"location":"lesson5/#exercise","text":"1.","title":"Exercise"},{"location":"lesson5/#questions","text":"","title":"Questions"},{"location":"lesson5/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson6/","text":"Lesson 101 !!! note \"Takeaways\" - blah Exercise 1. Questions Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 106"},{"location":"lesson6/#lesson-101","text":"!!! note \"Takeaways\" - blah","title":"Lesson 101"},{"location":"lesson6/#exercise","text":"1.","title":"Exercise"},{"location":"lesson6/#questions","text":"","title":"Questions"},{"location":"lesson6/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson7/","text":"Lesson 101 !!! note \"Takeaways\" - blah Exercise 1. Questions Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 107"},{"location":"lesson7/#lesson-101","text":"!!! note \"Takeaways\" - blah","title":"Lesson 101"},{"location":"lesson7/#exercise","text":"1.","title":"Exercise"},{"location":"lesson7/#questions","text":"","title":"Questions"},{"location":"lesson7/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"}]}