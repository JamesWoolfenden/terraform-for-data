{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Terraform-for-data Terraform 101 for data From Zero. By James Woolfenden I've been using Terraform since version 0.5 https://www.hashicorp.com/blog/terraform-0-5/ while that seems a while, I'm still learning and it's still changing. I've used it with all of the main public clouds. The majority of the examples here will target AWS, but no prior knowledge is required. Pre-requisites Terraform 0.12.21 or newer. An editor, VSCode, Atom or equivalent. Resources This site https://jameswoolfenden.github.io/terraform-for-data/ Its repo: https://github.com/JamesWoolfenden/terraform-for-data/ More Terraform lesson site https://jameswoolfenden.github.io/terraform-by-example/ Its repo: https://github.com/JamesWoolfenden/terraform-by-example/ Further work: https://slalom-consulting-ltd.github.io/learn-terraform/ Hashicorps learn site https://learn.hashicorp.com/terraform Note These lessons are aimed at anyone, only familiarity with Git and a code editor [atom or VSCode] is expected. Terraform can be a real handful to type at the CLI , but at least its not called * constellation * as originally planned .","title":"Home"},{"location":"#terraform-for-data","text":"","title":"Terraform-for-data"},{"location":"#terraform-101-for-data","text":"From Zero. By James Woolfenden I've been using Terraform since version 0.5 https://www.hashicorp.com/blog/terraform-0-5/ while that seems a while, I'm still learning and it's still changing. I've used it with all of the main public clouds. The majority of the examples here will target AWS, but no prior knowledge is required.","title":"Terraform 101 for data"},{"location":"#pre-requisites","text":"Terraform 0.12.21 or newer. An editor, VSCode, Atom or equivalent.","title":"Pre-requisites"},{"location":"#resources","text":"This site https://jameswoolfenden.github.io/terraform-for-data/ Its repo: https://github.com/JamesWoolfenden/terraform-for-data/ More Terraform lesson site https://jameswoolfenden.github.io/terraform-by-example/ Its repo: https://github.com/JamesWoolfenden/terraform-by-example/ Further work: https://slalom-consulting-ltd.github.io/learn-terraform/ Hashicorps learn site https://learn.hashicorp.com/terraform Note These lessons are aimed at anyone, only familiarity with Git and a code editor [atom or VSCode] is expected. Terraform can be a real handful to type at the CLI , but at least its not called * constellation * as originally planned .","title":"Resources"},{"location":"about/","text":"About Author: James Woolfenden LinkedIn Bio I'm currently working as a Solution Principal for Slalom and based out of London. I have a bit of experience in the DevOps field, I have worked for a number of consultancies directly and indirectly. This is the second of series on Learning about DevOps. Why This is small run through of using Hashicorp Terraform. As a consultant I frequently have to train developers and \"DevOps\" Engineers how, why and when to use it. I started using Terraform from around version 0.5, I was on a Greenfield AWS project and was really struggling with Cloudformation and its tooling. I asked a question on Linkedin on what others were using and the steers I got were Terraform or Ansible. I achieved more in the day after than in the previous week. Hopefully you'll find this book useful. If it's missing or wrong in anyway, log an Issue or even submit a PR. Each Chapter also contains a copy of the code the chapter tries to teach you how to create. I originally wrote this for the pre 0.11 Terraform and I hopefully updated everything to 0.12 and all the samples should work.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#author-james-woolfenden","text":"LinkedIn","title":"Author: James Woolfenden"},{"location":"about/#bio","text":"I'm currently working as a Solution Principal for Slalom and based out of London. I have a bit of experience in the DevOps field, I have worked for a number of consultancies directly and indirectly. This is the second of series on Learning about DevOps.","title":"Bio"},{"location":"about/#why","text":"This is small run through of using Hashicorp Terraform. As a consultant I frequently have to train developers and \"DevOps\" Engineers how, why and when to use it. I started using Terraform from around version 0.5, I was on a Greenfield AWS project and was really struggling with Cloudformation and its tooling. I asked a question on Linkedin on what others were using and the steers I got were Terraform or Ansible. I achieved more in the day after than in the previous week. Hopefully you'll find this book useful. If it's missing or wrong in anyway, log an Issue or even submit a PR. Each Chapter also contains a copy of the code the chapter tries to teach you how to create. I originally wrote this for the pre 0.11 Terraform and I hopefully updated everything to 0.12 and all the samples should work.","title":"Why"},{"location":"help/","text":"Help If its been useful, let me know. If it out of date or broken also. I'll appreciate it. Or If you think something's missing or contribute? Got a question? File a GitHub issue . Contributing Bug Reports & Feature Requests Please use the issue tracker to report any bugs or file feature requests. Copyrights Copyright \u00a9 2019-2020 Slalom, LLC License Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. Contributors James Woolfenden","title":"Help"},{"location":"help/#help","text":"If its been useful, let me know. If it out of date or broken also. I'll appreciate it. Or If you think something's missing or contribute? Got a question? File a GitHub issue .","title":"Help"},{"location":"help/#contributing","text":"","title":"Contributing"},{"location":"help/#bug-reports-feature-requests","text":"Please use the issue tracker to report any bugs or file feature requests.","title":"Bug Reports &amp; Feature Requests"},{"location":"help/#copyrights","text":"Copyright \u00a9 2019-2020 Slalom, LLC","title":"Copyrights"},{"location":"help/#license","text":"Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements. See the NOTICE file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"help/#contributors","text":"James Woolfenden","title":"Contributors"},{"location":"lesson1/","text":"Lesson 101 Hello World Your first template Once you have Terraform and and editor (VScode installed): Start - make a null resource by creating a file called null_resource.helloworld.tf . A null resource doesn't do anything by itself and doesnt require any CLoud Provider Authentication. touch null_resource.helloworld.tf Then add the block below to it. resource \"null_resource\" \"hello_world\" { } You have created your first Terraform template, but as yet it does nothing. Next step is to ad a local executable provisioner, to give the null resource some utility: resource \"null_resource\" \"hello_world\" { provisioner \"local-exec\" { # This is a comment command = \"echo 'hello world'\" } } Fairly straighforward? Time to try your work with terraform init at your shell. $ terraform init Initializing the backend... Initializing provider plugins... - Checking for available provider plugins... - Downloading plugin for provider \"null\" ( hashicorp/null ) 2 .1.2... The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.null: version = \"~> 2.1\" Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Terraform init is only needed on new templates and when you add modules or change module versions or providers. You don't have to remember it all, Terraform will fail at apply. Now that has been set up, you can try terraform apply , and when prompted, say yes. $ terraform apply An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # null_resource.hello_world will be created + resource \"null_resource\" \"hello_world\" { + id = ( known after apply ) } Plan: 1 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes null_resource.hello_world: Creating... null_resource.hello_world: Provisioning with 'local-exec' ... null_resource.hello_world ( local-exec ) : Executing: [ \"cmd\" \"/C\" \"echo 'hello world'\" ] null_resource.hello_world ( local-exec ) : 'hello world' null_resource.hello_world: Creation complete after 1s [ id = 5019739039794330655 ] Apply complete! Resources: 1 added, 0 changed, 0 destroyed. You have made a Terraform template that does something! Now check what files you have on your filesystem. ls -al total 1 drwxrwxrwx 1 jim jim 512 Feb 22 06 :59 . drwxrwxrwx 1 jim jim 512 Feb 22 06 :54 .. drwxrwxrwx 1 jim jim 512 Feb 22 06 :56 .terraform -rwxrwxrwx 1 jim jim 139 Feb 22 06 :59 null.helloworld.tf -rwxrwxrwx 1 jim jim 513 Feb 22 06 :59 terraform.tfstate Terraform.tfstate is your local state file .terraform contains your providers and modules[if any]. Refactor We can be and should be more specify, state the exact Provider version required provider.null.tf provider \"null\" { version = \"2.1.2\" } We specify versions so that we reproduce the same result. Specify the TF core version by specifying Terraform version in terraform.tf terraform { required_version = \"0.12.20\" } State files are linked to TF core version, all members of a team using TF need to use the same version. If one upgrades, all must upgrade, so add this to ensure that you mean to. Re-test these changes with a new apply. Real world example resource \"null_resource\" \"waiter\" { depends_on = [ aws_iam_instance_profile . ec 2 profile ] provisioner \"local-exec\" { command = \"sleep 15\" } } This is basically a hack, pretty much any use of a null resources is up to something dubious. In this case AWS was being rubbish and reported that an object was made when it wasn't yet - eventually consistent and so here we are with a sleep statement. I rarely use Provisioners myself these days, they are bad style and a hangover from Terraforms beginnings. !!! note \"Takeaways\" - Naming - Versions - Provisioners - Providers - Plan & apply Exercise Change the required_version to \"0.12.25\" and Apply, what happens? Questions When could specifing the Version still be insufficient for repeatability? when the underlying API itself changes and is no longer backwardly compatible, this wont happen very quickly but it will happen. Its also is bound to the version of the Terraform tool you are using. Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 101 Hello World"},{"location":"lesson1/#lesson-101-hello-world","text":"","title":"Lesson 101 Hello World"},{"location":"lesson1/#your-first-template","text":"Once you have Terraform and and editor (VScode installed): Start - make a null resource by creating a file called null_resource.helloworld.tf . A null resource doesn't do anything by itself and doesnt require any CLoud Provider Authentication. touch null_resource.helloworld.tf Then add the block below to it. resource \"null_resource\" \"hello_world\" { } You have created your first Terraform template, but as yet it does nothing. Next step is to ad a local executable provisioner, to give the null resource some utility: resource \"null_resource\" \"hello_world\" { provisioner \"local-exec\" { # This is a comment command = \"echo 'hello world'\" } } Fairly straighforward? Time to try your work with terraform init at your shell. $ terraform init Initializing the backend... Initializing provider plugins... - Checking for available provider plugins... - Downloading plugin for provider \"null\" ( hashicorp/null ) 2 .1.2... The following providers do not have any version constraints in configuration, so the latest version was installed. To prevent automatic upgrades to new major versions that may contain breaking changes, it is recommended to add version = \"...\" constraints to the corresponding provider blocks in configuration, with the constraint strings suggested below. * provider.null: version = \"~> 2.1\" Terraform has been successfully initialized! You may now begin working with Terraform. Try running \"terraform plan\" to see any changes that are required for your infrastructure. All Terraform commands should now work. If you ever set or change modules or backend configuration for Terraform, rerun this command to reinitialize your working directory. If you forget, other commands will detect it and remind you to do so if necessary. Terraform init is only needed on new templates and when you add modules or change module versions or providers. You don't have to remember it all, Terraform will fail at apply. Now that has been set up, you can try terraform apply , and when prompted, say yes. $ terraform apply An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # null_resource.hello_world will be created + resource \"null_resource\" \"hello_world\" { + id = ( known after apply ) } Plan: 1 to add, 0 to change, 0 to destroy. Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes null_resource.hello_world: Creating... null_resource.hello_world: Provisioning with 'local-exec' ... null_resource.hello_world ( local-exec ) : Executing: [ \"cmd\" \"/C\" \"echo 'hello world'\" ] null_resource.hello_world ( local-exec ) : 'hello world' null_resource.hello_world: Creation complete after 1s [ id = 5019739039794330655 ] Apply complete! Resources: 1 added, 0 changed, 0 destroyed. You have made a Terraform template that does something! Now check what files you have on your filesystem. ls -al total 1 drwxrwxrwx 1 jim jim 512 Feb 22 06 :59 . drwxrwxrwx 1 jim jim 512 Feb 22 06 :54 .. drwxrwxrwx 1 jim jim 512 Feb 22 06 :56 .terraform -rwxrwxrwx 1 jim jim 139 Feb 22 06 :59 null.helloworld.tf -rwxrwxrwx 1 jim jim 513 Feb 22 06 :59 terraform.tfstate Terraform.tfstate is your local state file .terraform contains your providers and modules[if any].","title":"Your first template"},{"location":"lesson1/#refactor","text":"We can be and should be more specify, state the exact Provider version required provider.null.tf provider \"null\" { version = \"2.1.2\" } We specify versions so that we reproduce the same result. Specify the TF core version by specifying Terraform version in terraform.tf terraform { required_version = \"0.12.20\" } State files are linked to TF core version, all members of a team using TF need to use the same version. If one upgrades, all must upgrade, so add this to ensure that you mean to. Re-test these changes with a new apply.","title":"Refactor"},{"location":"lesson1/#real-world-example","text":"resource \"null_resource\" \"waiter\" { depends_on = [ aws_iam_instance_profile . ec 2 profile ] provisioner \"local-exec\" { command = \"sleep 15\" } } This is basically a hack, pretty much any use of a null resources is up to something dubious. In this case AWS was being rubbish and reported that an object was made when it wasn't yet - eventually consistent and so here we are with a sleep statement. I rarely use Provisioners myself these days, they are bad style and a hangover from Terraforms beginnings. !!! note \"Takeaways\" - Naming - Versions - Provisioners - Providers - Plan & apply","title":"Real world example"},{"location":"lesson1/#exercise","text":"Change the required_version to \"0.12.25\" and Apply, what happens?","title":"Exercise"},{"location":"lesson1/#questions","text":"When could specifing the Version still be insufficient for repeatability? when the underlying API itself changes and is no longer backwardly compatible, this wont happen very quickly but it will happen. Its also is bound to the version of the Terraform tool you are using.","title":"Questions"},{"location":"lesson1/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson2/","text":"Lesson 102 AWS Authentication and Endpoints In the previous example there was no Auth as there was no Cloud API/Provider. pre-requisites aws account iam user and access keys Setting up basic Auth for AWS/Terraform. Install aws-cli Install aws auth using you access keys $ aws configure AWS Access Key ID [ ****************ZTLA ] : AWS Secret Access Key [ ****************Z5Pj ] : Default region name [ eu-west-1 ] : Default output format [ json ] : Test Auth You can test your AWS authentication with a basic AWS command: aws s3 ls If that is successful we can progress to out task. Provisioning an VPC Endpoint for S3 - PrivateLink A provisioned PrivateLink means that all traffic is routed private to the endpoint rather than over the internet. Add the Provider Create provider.aws.tf provider \"aws\" { region = \"eu-west-1\" version = \"2.54\" } This completes you basic Authentication for AWS and Terraform. Test with: Terraform init Terraform apply Datasources To Add a VPC endpoint we first need to gather some basic information from the account, datasources are used for this data.tf : data \"aws_vpcs\" \"cluster\" {} data \"aws_region\" \"current\" {} This will give ALL the VPC's is region as well as the current region. Create and AWS resource Add the code to create the S3 Endpoint aws_vpc_endpoint.s3.tf : resource \"aws_vpc_endpoint\" \"s3\" { vpc_id = element ( tolist ( data . aws_vpcs . cluster . ids ), 0 ) service_name = \"com.amazonaws.${data.aws_region.current.name}.s3\" tags = { \"createdby\" = \"Terraform\" \"Name\" = \"S3\" } } !!! note \"Takeaways\" - blah Exercise 1. Questions What is missing from this to set up access for an EC2 instance to use the Private Link? There's no route, modification to the routeables is required. Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 102 AWS"},{"location":"lesson2/#lesson-102-aws-authentication-and-endpoints","text":"In the previous example there was no Auth as there was no Cloud API/Provider.","title":"Lesson 102 AWS Authentication and Endpoints"},{"location":"lesson2/#pre-requisites","text":"aws account iam user and access keys Setting up basic Auth for AWS/Terraform. Install aws-cli Install aws auth using you access keys $ aws configure AWS Access Key ID [ ****************ZTLA ] : AWS Secret Access Key [ ****************Z5Pj ] : Default region name [ eu-west-1 ] : Default output format [ json ] :","title":"pre-requisites"},{"location":"lesson2/#test-auth","text":"You can test your AWS authentication with a basic AWS command: aws s3 ls If that is successful we can progress to out task.","title":"Test Auth"},{"location":"lesson2/#provisioning-an-vpc-endpoint-for-s3-privatelink","text":"A provisioned PrivateLink means that all traffic is routed private to the endpoint rather than over the internet.","title":"Provisioning an VPC Endpoint for S3 - PrivateLink"},{"location":"lesson2/#add-the-provider","text":"Create provider.aws.tf provider \"aws\" { region = \"eu-west-1\" version = \"2.54\" } This completes you basic Authentication for AWS and Terraform. Test with: Terraform init Terraform apply","title":"Add the Provider"},{"location":"lesson2/#datasources","text":"To Add a VPC endpoint we first need to gather some basic information from the account, datasources are used for this data.tf : data \"aws_vpcs\" \"cluster\" {} data \"aws_region\" \"current\" {} This will give ALL the VPC's is region as well as the current region.","title":"Datasources"},{"location":"lesson2/#create-and-aws-resource","text":"Add the code to create the S3 Endpoint aws_vpc_endpoint.s3.tf : resource \"aws_vpc_endpoint\" \"s3\" { vpc_id = element ( tolist ( data . aws_vpcs . cluster . ids ), 0 ) service_name = \"com.amazonaws.${data.aws_region.current.name}.s3\" tags = { \"createdby\" = \"Terraform\" \"Name\" = \"S3\" } } !!! note \"Takeaways\" - blah","title":"Create and AWS resource"},{"location":"lesson2/#exercise","text":"1.","title":"Exercise"},{"location":"lesson2/#questions","text":"What is missing from this to set up access for an EC2 instance to use the Private Link? There's no route, modification to the routeables is required.","title":"Questions"},{"location":"lesson2/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson3/","text":"Lesson 103 AWS RDS and SQLServer !!! note \"Takeaways\" - blah Exercise 1. Questions Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 103 AWS RDS MSSQL"},{"location":"lesson3/#lesson-103-aws-rds-and-sqlserver","text":"!!! note \"Takeaways\" - blah","title":"Lesson 103 AWS RDS and SQLServer"},{"location":"lesson3/#exercise","text":"1.","title":"Exercise"},{"location":"lesson3/#questions","text":"","title":"Questions"},{"location":"lesson3/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson4/","text":"Lesson 104 Terraforming Snowflake Install Custom Snowflake provider From https://github.com/chanzuckerberg/terraform-provider-snowflake download your platforms latest provider https://github.com/chanzuckerberg/terraform-provider-snowflake/releases : Or find the example archive examples\\lesson04\\terraform-provider-snowflake_0.11.0_linux_amd64.tar.gz Expand the archive and add it to your Terraform plugins: tar -xvf terraform-provider-snowflake_0.11.0_linux_amd64.tar.gz mv terraform-provider-snowflake_v0.11.0 $HOME /.terraform.d/plugins/linux_amd64/ ToSet-up Authentication with Snowflake, you'll need to add your Snowflake credentials as environmental variables: export SNOWFLAKE_USER = 'yourusername' export SNOWFLAKE_PASSWORD = 'yourpassword' and then create provider.snowflake.tf to managed the Snowflake provider in Terraform. provider \"snowflake\" { account = \"ba82113\" region = \"eu-west-1\" version = \"0.11\" } Adding in your own vales for account and region You can then check authentication using Terraform init and plan . Now that Authectication is validated, then next step is to try and create some Snowflake objects. Starting with Schemas - snowflake_schmea.schema.tf . resource \"snowflake_schema\" \"schema\" { for_each = var . schemas name = each . key database = each . value . database comment = each . value . comment } This template needs to have the variable schema defined, create variables.tf variable \"schemas\" { } And set the values for your schemas with snowflake.auto.tfvars schemas = { \"RAW\" = { database = \"DEMO_DB\" comment = \"contains raw data from our source systems\" } \"ANALYTICS\" = { database = \"DEMO_DB\" comment = \"contains tables and views accessible to analysts and reporting\" } } This should now create 2 schemas, RAW and ANALYTICS (assuming you already have a DEMO_DB). Test as before with Terraform init and plan $ terraform plan Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # snowflake_schema.schema[\"ANALYTICS\"] will be created + resource \"snowflake_schema\" \"schema\" { + comment = \"contains tables and views accessible to analysts and reporting\" + data_retention_days = 1 + database = \"DEMO_DB\" + id = ( known after apply ) + is_managed = false + is_transient = false + name = \"ANALYTICS\" } # snowflake_schema.schema[\"RAW\"] will be created + resource \"snowflake_schema\" \"schema\" { + comment = \"contains raw data from our source systems\" + data_retention_days = 1 + database = \"DEMO_DB\" + id = ( known after apply ) + is_managed = false + is_transient = false + name = \"RAW\" } Plan: 2 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Invoke the changes with Terraform apply , selecting yes: Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes snowflake_schema.schema [ \"ANALYTICS\" ] : Creating... snowflake_schema.schema [ \"RAW\" ] : Creating... snowflake_schema.schema [ \"ANALYTICS\" ] : Creation complete after 1s [ id = DEMO_DB | ANALYTICS ] snowflake_schema.schema [ \"RAW\" ] : Creation complete after 1s [ id = DEMO_DB | RAW ] Apply complete! Resources: 2 added, 0 changed, 0 destroyed. Terraform is stating that the Schemas have been created, you can verify the changes in the Snowflake UI, or via SnowSQL with: describe database DEMO_DB ; created_on name kind 2020 - 04 - 21 02 : 33 : 30 . 727 - 0700 ANALYTICS SCHEMA 2020 - 04 - 21 02 : 35 : 19 . 987 - 0700 INFORMATION_SCHEMA SCHEMA 2020 - 04 - 17 02 : 02 : 42 . 057 - 0700 PUBLIC SCHEMA 2020 - 04 - 21 02 : 33 : 30 . 736 - 0700 RAW SCHEMA So thats Terraform creating Snowflake resources via IaC. You can then clean up remove these schemas with Terraform destroy: $ terraform destroy snowflake_schema.schema [ \"RAW\" ] : Refreshing state... [ id = DEMO_DB | RAW ] snowflake_schema.schema [ \"ANALYTICS\" ] : Refreshing state... [ id = DEMO_DB | ANALYTICS ] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # snowflake_schema.schema[\"ANALYTICS\"] will be destroyed - resource \"snowflake_schema\" \"schema\" { - comment = \"contains tables and views accessible to analysts and reporting\" -> null - data_retention_days = 1 -> null - database = \"DEMO_DB\" -> null - id = \"DEMO_DB|ANALYTICS\" -> null - is_managed = false -> null - is_transient = false -> null - name = \"ANALYTICS\" -> null } # snowflake_schema.schema[\"RAW\"] will be destroyed - resource \"snowflake_schema\" \"schema\" { - comment = \"contains raw data from our source systems\" -> null - data_retention_days = 1 -> null - database = \"DEMO_DB\" -> null - id = \"DEMO_DB|RAW\" -> null - is_managed = false -> null - is_transient = false -> null - name = \"RAW\" -> null } Plan: 0 to add, 0 to change, 2 to destroy. Do you really want to destroy all resources? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only 'yes' will be accepted to confirm. Enter a value: yes snowflake_schema.schema [ \"RAW\" ] : Destroying... [ id = DEMO_DB | RAW ] snowflake_schema.schema [ \"ANALYTICS\" ] : Destroying... [ id = DEMO_DB | ANALYTICS ] snowflake_schema.schema [ \"ANALYTICS\" ] : Destruction complete after 1s snowflake_schema.schema [ \"RAW\" ] : Destruction complete after 1s Destroy complete! Resources: 2 destroyed. Which again can be checked with describing the Database: created_on name kind 2020 - 04 - 21 02 : 38 : 39 . 248 - 0700 INFORMATION_SCHEMA SCHEMA 2020 - 04 - 17 02 : 02 : 42 . 057 - 0700 PUBLIC SCHEMA !!! note \"Takeaways\" - blah Can create Snowflake db objects via Terraform. Clean of DB objects by default. Exercise Create Snowflake users via Terraform. Questions Is this any better than using standrard SQL tooling? Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html https://github.com/chanzuckerberg/terraform-provider-snowflake https://adam.boscarino.me/posts/terraform-snowflake/","title":"Lesson 104 Snowflake"},{"location":"lesson4/#lesson-104-terraforming-snowflake","text":"","title":"Lesson 104 Terraforming Snowflake"},{"location":"lesson4/#install-custom-snowflake-provider","text":"From https://github.com/chanzuckerberg/terraform-provider-snowflake download your platforms latest provider https://github.com/chanzuckerberg/terraform-provider-snowflake/releases : Or find the example archive examples\\lesson04\\terraform-provider-snowflake_0.11.0_linux_amd64.tar.gz Expand the archive and add it to your Terraform plugins: tar -xvf terraform-provider-snowflake_0.11.0_linux_amd64.tar.gz mv terraform-provider-snowflake_v0.11.0 $HOME /.terraform.d/plugins/linux_amd64/ ToSet-up Authentication with Snowflake, you'll need to add your Snowflake credentials as environmental variables: export SNOWFLAKE_USER = 'yourusername' export SNOWFLAKE_PASSWORD = 'yourpassword' and then create provider.snowflake.tf to managed the Snowflake provider in Terraform. provider \"snowflake\" { account = \"ba82113\" region = \"eu-west-1\" version = \"0.11\" } Adding in your own vales for account and region You can then check authentication using Terraform init and plan . Now that Authectication is validated, then next step is to try and create some Snowflake objects. Starting with Schemas - snowflake_schmea.schema.tf . resource \"snowflake_schema\" \"schema\" { for_each = var . schemas name = each . key database = each . value . database comment = each . value . comment } This template needs to have the variable schema defined, create variables.tf variable \"schemas\" { } And set the values for your schemas with snowflake.auto.tfvars schemas = { \"RAW\" = { database = \"DEMO_DB\" comment = \"contains raw data from our source systems\" } \"ANALYTICS\" = { database = \"DEMO_DB\" comment = \"contains tables and views accessible to analysts and reporting\" } } This should now create 2 schemas, RAW and ANALYTICS (assuming you already have a DEMO_DB). Test as before with Terraform init and plan $ terraform plan Refreshing Terraform state in-memory prior to plan... The refreshed state will be used to calculate this plan, but will not be persisted to local or remote state storage. ------------------------------------------------------------------------ An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: + create Terraform will perform the following actions: # snowflake_schema.schema[\"ANALYTICS\"] will be created + resource \"snowflake_schema\" \"schema\" { + comment = \"contains tables and views accessible to analysts and reporting\" + data_retention_days = 1 + database = \"DEMO_DB\" + id = ( known after apply ) + is_managed = false + is_transient = false + name = \"ANALYTICS\" } # snowflake_schema.schema[\"RAW\"] will be created + resource \"snowflake_schema\" \"schema\" { + comment = \"contains raw data from our source systems\" + data_retention_days = 1 + database = \"DEMO_DB\" + id = ( known after apply ) + is_managed = false + is_transient = false + name = \"RAW\" } Plan: 2 to add, 0 to change, 0 to destroy. ------------------------------------------------------------------------ Invoke the changes with Terraform apply , selecting yes: Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: yes snowflake_schema.schema [ \"ANALYTICS\" ] : Creating... snowflake_schema.schema [ \"RAW\" ] : Creating... snowflake_schema.schema [ \"ANALYTICS\" ] : Creation complete after 1s [ id = DEMO_DB | ANALYTICS ] snowflake_schema.schema [ \"RAW\" ] : Creation complete after 1s [ id = DEMO_DB | RAW ] Apply complete! Resources: 2 added, 0 changed, 0 destroyed. Terraform is stating that the Schemas have been created, you can verify the changes in the Snowflake UI, or via SnowSQL with: describe database DEMO_DB ; created_on name kind 2020 - 04 - 21 02 : 33 : 30 . 727 - 0700 ANALYTICS SCHEMA 2020 - 04 - 21 02 : 35 : 19 . 987 - 0700 INFORMATION_SCHEMA SCHEMA 2020 - 04 - 17 02 : 02 : 42 . 057 - 0700 PUBLIC SCHEMA 2020 - 04 - 21 02 : 33 : 30 . 736 - 0700 RAW SCHEMA So thats Terraform creating Snowflake resources via IaC. You can then clean up remove these schemas with Terraform destroy: $ terraform destroy snowflake_schema.schema [ \"RAW\" ] : Refreshing state... [ id = DEMO_DB | RAW ] snowflake_schema.schema [ \"ANALYTICS\" ] : Refreshing state... [ id = DEMO_DB | ANALYTICS ] An execution plan has been generated and is shown below. Resource actions are indicated with the following symbols: - destroy Terraform will perform the following actions: # snowflake_schema.schema[\"ANALYTICS\"] will be destroyed - resource \"snowflake_schema\" \"schema\" { - comment = \"contains tables and views accessible to analysts and reporting\" -> null - data_retention_days = 1 -> null - database = \"DEMO_DB\" -> null - id = \"DEMO_DB|ANALYTICS\" -> null - is_managed = false -> null - is_transient = false -> null - name = \"ANALYTICS\" -> null } # snowflake_schema.schema[\"RAW\"] will be destroyed - resource \"snowflake_schema\" \"schema\" { - comment = \"contains raw data from our source systems\" -> null - data_retention_days = 1 -> null - database = \"DEMO_DB\" -> null - id = \"DEMO_DB|RAW\" -> null - is_managed = false -> null - is_transient = false -> null - name = \"RAW\" -> null } Plan: 0 to add, 0 to change, 2 to destroy. Do you really want to destroy all resources? Terraform will destroy all your managed infrastructure, as shown above. There is no undo. Only 'yes' will be accepted to confirm. Enter a value: yes snowflake_schema.schema [ \"RAW\" ] : Destroying... [ id = DEMO_DB | RAW ] snowflake_schema.schema [ \"ANALYTICS\" ] : Destroying... [ id = DEMO_DB | ANALYTICS ] snowflake_schema.schema [ \"ANALYTICS\" ] : Destruction complete after 1s snowflake_schema.schema [ \"RAW\" ] : Destruction complete after 1s Destroy complete! Resources: 2 destroyed. Which again can be checked with describing the Database: created_on name kind 2020 - 04 - 21 02 : 38 : 39 . 248 - 0700 INFORMATION_SCHEMA SCHEMA 2020 - 04 - 17 02 : 02 : 42 . 057 - 0700 PUBLIC SCHEMA !!! note \"Takeaways\" - blah Can create Snowflake db objects via Terraform. Clean of DB objects by default.","title":"Install Custom Snowflake provider"},{"location":"lesson4/#exercise","text":"Create Snowflake users via Terraform.","title":"Exercise"},{"location":"lesson4/#questions","text":"Is this any better than using standrard SQL tooling?","title":"Questions"},{"location":"lesson4/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html https://github.com/chanzuckerberg/terraform-provider-snowflake https://adam.boscarino.me/posts/terraform-snowflake/","title":"Documentation"},{"location":"lesson5/","text":"Lesson 101 !!! note \"Takeaways\" - blah Exercise 1. Questions Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 101"},{"location":"lesson5/#lesson-101","text":"!!! note \"Takeaways\" - blah","title":"Lesson 101"},{"location":"lesson5/#exercise","text":"1.","title":"Exercise"},{"location":"lesson5/#questions","text":"","title":"Questions"},{"location":"lesson5/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson6/","text":"Lesson 101 !!! note \"Takeaways\" - blah Exercise 1. Questions Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 101"},{"location":"lesson6/#lesson-101","text":"!!! note \"Takeaways\" - blah","title":"Lesson 101"},{"location":"lesson6/#exercise","text":"1.","title":"Exercise"},{"location":"lesson6/#questions","text":"","title":"Questions"},{"location":"lesson6/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"},{"location":"lesson7/","text":"Lesson 101 !!! note \"Takeaways\" - blah Exercise 1. Questions Documentation For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Lesson 101"},{"location":"lesson7/#lesson-101","text":"!!! note \"Takeaways\" - blah","title":"Lesson 101"},{"location":"lesson7/#exercise","text":"1.","title":"Exercise"},{"location":"lesson7/#questions","text":"","title":"Questions"},{"location":"lesson7/#documentation","text":"For more on null resource see the Hashicorp docs: https://www.terraform.io/docs/providers/null/resource.html","title":"Documentation"}]}